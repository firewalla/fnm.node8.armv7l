{
  "name": "redis-timeseries",
  "version": "0.4.0",
  "description": "Manage timeseries data storage in Redis with ease",
  "main": "index.js",
  "scripts": {
    "test": "vows test/*.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tonyskn/node-redis-timeseries.git"
  },
  "keywords": [
    "Redis",
    "Timeseries"
  ],
  "author": {
    "name": "Tony Sokhon"
  },
  "license": "MIT",
  "peerDependencies": {
    "redis": "0.x || 1.x || 2.x"
  },
  "devDependencies": {
    "redis": "0.x",
    "hiredis": "0.x",
    "async": "~0.2.10",
    "vows": "~0.7.0"
  },
  "gitHead": "894960b92788363f9a6cb4f69c5eae401d8bd9e7",
  "readme": "# Node.js API for storing and querying time series in Redis\n\n[![Build Status][travis-image]][travis]\n\nConvenient module for storing and querying time series statistics in Redis using Node.js.\n\nThe design (and even parts of the implementation) were picked from the [ApiAxle](http://blog.apiaxle.com/post/storing-near-realtime-stats-in-redis/) project.\n\nYou can find basic usage examples in `examples`. This module also powers a [real-time dashboard](https://github.com/tonyskn/node-dashboard) written in Node.js. Check the sources out for more insight.\n\n## Dependencies\n\n`redis-timeseries` has no dependencies, and will work along the `redis` module you'll install in your own project. `redis@~0.9.0` versions are compatible.\n\n## Usage\n\n```javascript\n\tvar TimeSeries = require('redis-timeseries'),\n\t\tredis = require('redis').createClient();\n\t\t\n\t// Create the TimeSeries client\n\t//\n\t// \"stats\" is the Redis namespace which will be used\n\t// for storing all the TimeSeries related keys\n    //\n\t// \"granularities\" encodes the granularities at which\n\t// you want to store statistics. More on that in the next section\n\t//\n\tvar ts = new TimeSeries(redis, \"stats\", granularities);\n\t\n\t// Recording hits\n\t//\n\t// This increments the counters for the\n\t// stats keys you provide\n\t//\n\t// \"timestamp\" defaults to the current time. If providing\n\t// a timestamp, it should be in unix timestamp format (seconds\n\t// since epoch).\n    // \"increment\" defaults to 1\n\t//\n\t// .exec takes an optional callback with no arguments.\n\tts.recordHit('your_stats_key')\n\t  .recordHit('another_stats_key', timestamp)\n      .recordHit('another_stats_key', timestamp2, increment)\n\t  …\n\t  .exec(callback);\n\n    // Removing hits\n    //\n    // Decrements the hits for a specified point in time.\n    ts.removeHit('your_stats_key', [timestamp]).exec();\n    \n    // Decrement defaults to 1, but can be specified explicitly (below).\n    ts.removeHit('your_stats_key', [timestamp], 5).exec();\n\t  \n\t// Querying statistics\n\t//\n\t// Returns \"count\" chunks of counters at the precision described by\n\t// \"granularity_label\"\n\t// \n\tts.getHits('your_stats_key', granularity_label, count, function(err, data) {\n\t\t// data.length == count\n\t\t// data = [ [ts1, count1], [ts2, count2]... ]\n\t});\n```\n\n## Defining custom statistics granularities\n\nFor each key, `TimeSeries` stores statistics at different granularities. For further information about this, please refer to the detailed [blog post](http://blog.apiaxle.com/post/storing-near-realtime-stats-in-redis/) from the ApiAxle project.\n\nThe default granularities are:\n\n```javascript\n{\n    '1second'  : { ttl: this.minutes(5), duration: 1 },\n    '1minute'  : { ttl: this.hours(1)  , duration: this.minutes(1) },\n    '5minutes' : { ttl: this.days(1)   , duration: this.minutes(5) },\n    '10minutes': { ttl: this.days(1)   , duration: this.minutes(10) },\n    '1hour'    : { ttl: this.days(7)   , duration: this.hours(1) },\n    '1day'     : { ttl: this.weeks(52) , duration: this.days(1) }\n}\n```\n\nThis means that the number of `hits per second` will be stored for `5 minutes`, and the corresponding hashset will expire afterwards.  Likewise, the number of `hits per minute` for a given key will be kept for an `hour`.  `Daily` counters on the other hand are kept for a full year.\n\nWhen querying for statistics, a granularity label is expected:\n\n```javascript\n\t// Give me the hits/second for the last 3 minutes\n\tts.getHits('your_stats_key', '1second', ts.minutes(3), function(err, data){\n\t\t//process the data\n\t});\n\t\n\t// Give me the number of hits per day for the last 2 weeks\n\tts.getHits('your_stats_key', '1day', 14, function(err, data){\n\t\t//process the data\n\t});\n\t\n\t// And so on\n```\n\nWhen creating the `TimeSeries` client, you can override the default granularities with your own. \n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/tonyskn/node-redis-timeseries/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[travis]: http://travis-ci.org/tonyskn/node-redis-timeseries\n[travis-image]: https://travis-ci.org/tonyskn/node-redis-timeseries.png\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tonyskn/node-redis-timeseries/issues"
  },
  "homepage": "https://github.com/tonyskn/node-redis-timeseries#readme",
  "_id": "redis-timeseries@0.4.0",
  "_shasum": "3e3d370f88b24f32220715a8735c0c2b663cdb42",
  "_from": "git+https://github.com/MelvinTo/node-redis-timeseries.git",
  "_resolved": "git+https://github.com/MelvinTo/node-redis-timeseries.git#894960b92788363f9a6cb4f69c5eae401d8bd9e7"
}
